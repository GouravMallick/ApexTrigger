// USE CASE 1: If user creates an Account, and user provides Billing address but not Shipping address, write a logic to populate Shipping address same as Billing address
// USE CASE 2: If user creates an Account, also check if annual revenue provided by the user is less than 1000 then throw an error to the user.
// USE CASE 3: when user create an account, write a logic to create a account with same name and associate account and contact
// USE CASE 4: when user update an account record, if user changes account name, throw an error "Account name once created acnnot be modified"
// USE CASE 5: when user update an account record, if billing address is changed, update all its child contacts mail address field same as account billing address
// USE CASE 6: An active account should not be deleted
// USE CASE 7: Whenever user delets an Account, send email to the user
// USE CASE 8: sent an email to the user when user restores an account from the recycle bin.
trigger AccountTrigger on Account (before insert, after insert, before update, after update, before delete, after delete, after undelete) {
    
    if(Trigger.isBefore && Trigger.isInsert){
        
         for(Account accRec: Trigger.new){

         //use case 2
         if(accRec.AnnualRevenue < 1000)
            accRec.addError('Annual Revenue cannot be less than 1000');
         //use case 1    
           if(accRec.ShippingCity == NULL)
              accRec.ShippingCity = accRec.BillingCity;
             
           if(accRec.ShippingCountry == NULL)
              accRec.ShippingCountry = accRec.BillingCountry;
             
           if(accRec.ShippingState == NULL)
              accRec.ShippingState = accRec.BillingState;
             
           if(accRec.ShippingStreet == NULL)
              accRec.ShippingStreet = accRec.BillingStreet;
             
           if(accRec.ShippingPostalCode == NULL)
              accRec.ShippingPostalCode = accRec.BillingPostalCode;
         }
    }
    //use case 3
    if(Trigger.isAfter && Trigger.isInsert){
        List<Contact> conListtoInsert = new List<Contact>();
        for(Account accRec: Trigger.new){
            Contact con = new Contact();
            con.LastName = accRec.Name;
            con.AccountId = accRec.Id;
            conListtoInsert.add(con);
    }
        if(conListtoInsert.size()>0)
            INSERT conListtoInsert;
}

  //use case 4
  if(Trigger.isBefore && Trigger.isUpdate){
        
         for(Account accRecNew: Trigger.new){
             Account accRecOld= Trigger.oldmap.get(accRecNew.id);
             if(accRecNew.Name != accRecOld.Name){
                 accRecNew.addError('Account name once created cannot be modified');
             }
         }
    }

    // USE CASE 5

    if(Trigger.isAfter && Trigger.isUpdate){
        
          Set<id> accIdwhereBillingStreetIsCahnged = new Set<id>();
         for(Account accRecNew: Trigger.new){
             Account accRecOld = Trigger.oldmap.get(accRecNew.Id);
             if(accRecNew.BillingStreet != accRecOld.BillingStreet) 
                 accIdwhereBillingStreetIsCahnged.add(accRecNew.Id);
         }
        List<Account> accwithContacts = [SELECT Id, name, billingstreet, billingcountry, billingstate,billingcity,(SELECT id,name from Contacts) FROM Account where ID IN: accIdwhereBillingStreetIsCahnged ];
        List<Contact> conToUpdate = new List<Contact>();
        
        for( Account acc : accwithContacts){
            List<Contact> listOfContactsAssociatedwithAccounts = acc.Contacts;
            for( Contact c: listOfContactsAssociatedwithAccounts){
                c.MailingCity = acc.BillingCity;
                c.MailingCountry =acc.BillingCountry;
                c.MailingState = acc.BillingState;
                c.MailingStreet = acc.BillingStreet;
                conToUpdate.add(c);
                }
            
        }
        if(conToUpdate.size()>0){
            UPDATE conToUpdate;
        }
        
    }
    
    //USE CASE 6
    if(Trigger.isBefore && Trigger.isDelete){
        for( Account accOld : Trigger.Old){
            if(accOld.Active__c == 'Yes')
                accOld.addError('When Account is active you cannot delete account record');
        }
    }
    
    // USE CASE 7
    
    if(Trigger.isAfter && Trigger.isDelete){
        List<Messaging.SingleEmailMessage> emailObjs = new List<Messaging.SingleEmailMessage>();
        for( Account accOld: Trigger.Old){
            Messaging.SingleEmailMessage emailObj = new Messaging.SingleEmailMessage();
            List<String> emailAddress = new List<String>();
            emailAddress.add(Userinfo.getUserEmail());
            emailObj.setToAddresses(emailAddress);
                emailObj.setSubject('Account has been Successfully Deleted' + accOld.Name);
                emailObj.setPlainTextBody('Hello for testing purpose');
                emailObjs.add(emailObj);
        }
        Messaging.sendEmail(emailObjs);
    }
    
    // USE CASE 8
    
    if(Trigger.isAfter && Trigger.isUndelete){
        List<Messaging.SingleEmailMessage> emailObjs = new List<Messaging.SingleEmailMessage>();
        for( Account accNew: Trigger.New){
            Messaging.SingleEmailMessage emailObj = new Messaging.SingleEmailMessage();
            List<String> emailAddress = new List<String>();
            emailAddress.add(Userinfo.getUserEmail());
            emailObj.setToAddresses(emailAddress);
                emailObj.setSubject('Account has been Successfully Restored' + accNew.Name);
                emailObj.setPlainTextBody('Hello for testing purpose');
                emailObjs.add(emailObj);
        }
        Messaging.sendEmail(emailObjs);
    }
}
